apply plugin: 'maven'
apply plugin: 'groovy'
if(new File("custom.gradle").exists()){
    apply from: 'custom.gradle'
}

import com.fgl.eai.buildframework.context.GitCommitContext
import com.fgl.eai.buildframework.context.MavenDeploymentContext
import com.fgl.eai.buildframework.entity.EnvironmentEntity
import com.fgl.eai.buildframework.entity.MavenArtifact
import com.mdw360.buildframework.release.ReleasePrepare

//Version Management -- do not remove
//build-framework-devops-version=1.8.0

dependencies {
    compile gradleApi()
    compile localGroovy()
}

repositories {
    mavenLocal()
    maven {
        url "${artifactory_contextUrl}/${artifactory_repoKey}"
        credentials {
            username = "${artifactory_readonly_user}"
            password = "${artifactory_readonly_password}"
        }
    }
    mavenCentral()
}

buildscript {
    repositories {
        mavenLocal()
        maven {
             url "${artifactory_contextUrl}/${artifactory_repoKey}"
             credentials {
                 username = "${artifactory_readonly_user}"
                 password = "${artifactory_readonly_password}"
             }
        }
        mavenCentral()
    }
    dependencies {
        classpath group:'com.mdw360.buildframework.release',  name:'releaseOps',     version:'1.8-SNAPSHOT'
        classpath group:'com.fgl.eai.buildframework',         name:'build-utils',     version:'1.8-SNAPSHOT'
        classpath group:'com.fgl.eai.buildframework.module',  name: 'IIBBuildDeploy', version:'1.8-SNAPSHOT'
    }
}
apply plugin: 'com.fgl.eai.buildframework.module.iib.builddeploy'

allprojects {
    apply plugin: 'groovy'
    apply plugin: 'maven-publish'
}

task releasePrepare(){
    println "Setting up releasePrepare"
}

releasePrepare << {
    ReleasePrepare releasePrepare = new ReleasePrepare(new File("versions.xml"))
    println "(RELEASE INFO) - Current Version: ${releasePrepare.getCurrentVersion()}"
    println "(RELEASE INFO) - Proposed Release Version: ${releasePrepare.getReleaseVersion(releasePrepare.getCurrentVersion())}"
    releasePrepare.setReleaseAndStageGit("../.git", getReleaseBranchAsString(releasePrepare.getCurrentVersion()))
}

task releasePerform(){
    println "Setting up releasePerform"
}

releasePerform << {
    ReleasePrepare releasePrepare = new ReleasePrepare(new File("versions.xml"))
    println "(RELEASE INFO) - Commit RELEASE 'versions.xml' file"
    releasePrepare.commitRelease("../.git", getReleaseBranchAsString(releasePrepare.getCurrentVersion()))
}

task snapshotPrepare(){
    println "Setting up snapshotPrepare()"
}

snapshotPrepare << {
    ReleasePrepare releasePrepare = new ReleasePrepare(new File("versions.xml"))
    println "(RELEASE INFO) - Current Version: ${releasePrepare.getCurrentVersion()}"
    println "(RELEASE INFO) - Proposed Release Version: ${releasePrepare.getReleaseVersion(releasePrepare.getCurrentVersion())}"
    releasePrepare. setSnapshotAndStageGit("../.git",getReleaseBranchAsString(releasePrepare.getCurrentVersion()))
}

task snapshotPerform(){
    println "Setting up snapshotPerform()"
}

snapshotPerform << {
    ReleasePrepare releasePrepare = new ReleasePrepare(new File("versions.xml"))
    println "(RELEASE INFO) - Commit SNAPSHOT 'versions.xml' file"
    releasePrepare.commitNextSnapshot("../.git", getReleaseBranchAsString(releasePrepare.getCurrentVersion()))
}

//PURPOSE: generate txt flat file with list of directories modified in commit
task gatherModifiedArtifactsFromGitLog(type:Exec){
   println "Setting up gatherModifedArtifactsFromGitLog"
    commandLine 'sh', './generateModifiedDirectoryList.sh'
}

//PURPOSE: gets ran at beginning of gradle setting up the build script
task configured {
    println "(BUILD INFO) Gathering List of Modified Projects from source control..."
    gatherModifiedArtifactsFromGitLog.execute()
}

task unzip(type: Copy) {
    outputs.upToDateWhen { false }
    def depJars = [ '../../common-library-jars.zip', '../../dependency_jars.zip']
    depJars.each { zipPath ->
        def zipFile = file("$zipPath")
        def outputDir = file("../build/extras")
        from zipTree(zipFile)
        into outputDir
    }
}

task runGroovyRemap {
  outputs.upToDateWhen { false }
  doLast {
    new GroovyShell().run(file("../build/remapClasspath.groovy"), "../build", "../source")
  }
}
runGroovyRemap.mustRunAfter unzip


task buildArtifacts(type: com.fgl.eai.buildframework.module.iib.builddeploy.IIBBuildDeployTask, dependsOn: ['gatherModifiedArtifactsFromGitLog', 'unzip', 'runGroovyRemap']) {
    println "buildArtifacts"
    println "(BUILD INFO) Project Directory: ${projectDir}"
    println "(BUILD INFO) Build Directory: ${buildDir}"

    String repoName
    if(project.hasProperty("repoName")) {
        println "(BUILD INFO) RepoName Property Value: ${project."repoName"}, Has Property?  ${project.hasProperty("repoName")}"
        println "(BUILD INFO) Setting repoName from gradle.properties file"
        repoName = project.get("repoName")
    }
    else{
        println "(BUILD INFO) Setting repoName from static value"
        repoName = "unknown_repo"
    }
}

task buildPublish(dependsOn: ['buildArtifacts', 'publish']) {
    println "buildPublish"
}

publish.mustRunAfter buildArtifacts

// normally called with 'publish'. See task 'publishArtifacts' below
publishing {
    println "Git Commit File List: ${GitCommitContext.directoryList}"
    publications {
        def TARGET_DIR="target"

        MavenDeploymentContext context = new MavenDeploymentContext()
        List<MavenArtifact> mavenArtifacts = context.getMavenArtifacts()
        List<EnvironmentEntity> environmentEntities = context.getEnvironmentEntities()

        mavenArtifacts.each { mavenArtifact ->
            if(project.hasProperty("buildAll") || GitCommitContext.directoryList.contains(mavenArtifact.name)) {
                println "(BUILD INFO) - Staging to Artifactory: ${mavenArtifact.group}:${mavenArtifact.name}:${mavenArtifact.version}"

                //Upload non-environment specific BAR (without configurations applied)
                "${mavenArtifact.name}"(MavenPublication) {
                    groupId "${mavenArtifact.group}"
                    artifactId "${mavenArtifact.name}"
                    version "${mavenArtifact.version}"
                    artifact file("../${TARGET_DIR}/${mavenArtifact.name}.bar")
                }

                environmentEntities.each { e ->
                    boolean bundleResources = false
                    //Upload snapshot specific BAR's for respective environments
                    if (e.getIsSnapshots() && mavenArtifact.isSnapshot()) {
                        "${mavenArtifact.name}-${e.name}"(MavenPublication) {
                            groupId "${mavenArtifact.group}"
                            artifactId "${mavenArtifact.name}-${e.name}"
                            //Tacks on the environment name to the artifact
                            version "${mavenArtifact.version}"
                            artifact file("../${TARGET_DIR}/${mavenArtifact.name}-${e.name}.bar")
                        }
                        bundleResources = true
                    }

                    //Upload non-snapshot specific BAR's for respective environments
                    // (should produce one for all env as long as the artifact is not in snapshot mode)
                    if (mavenArtifact.isSnapshot() == false) {
                        "${mavenArtifact.name}-${e.name}"(MavenPublication) {
                            groupId "${mavenArtifact.group}"
                            artifactId "${mavenArtifact.name}-${e.name}"
                            //Tacks on the environment name to the artifact
                            version "${mavenArtifact.version}"
                            artifact file("../${TARGET_DIR}/${mavenArtifact.name}-${e.name}.bar")
                        }
                        bundleResources = true
                    }

                    // define deployment dependencies for each environment
                    if (bundleResources) {
                        "${mavenArtifact.name}-${e.name}-resources"(MavenPublication) {
                            groupId "${mavenArtifact.group}"
                            artifactId "${mavenArtifact.name}-${e.name}-resources"
                            //Tacks on the environment name to the artifact
                            version "${mavenArtifact.version}"
                            artifact file("../${TARGET_DIR}/${mavenArtifact.name}-${e.name}-resources.zip")
                        }
                    }
                }
            }
            else{
                println "(BUILD INFO) - NOT BUILDING ${mavenArtifact.name}, as code base not modified."
            }
        }
    }
    repositories {
        maven {
            url "${artifactory_contextUrl}/${artifactory_repoKey}"
            credentials {
                username = "${artifactory_publisher_user}"
                password = "${artifactory_publisher_password}"
            }
        }
    }
}

gradle.taskGraph.afterTask { Task task, TaskState state ->
    println "TASK: ${task.name} : STATE: ${state}"
    if (state.failure) {
        println "FAILED Execution of Task: ${task.name}"
    }
    else {
        println "Completed Task: ${task.name}"
    }
}

task zipTask(type: Zip) {
}

/**
 *
 * @param currentVersion
 * @return String representing the release branch
 */
private String getReleaseBranchAsString(String currentVersion){
    if(!currentVersion || currentVersion.length() < 3){
        throw new IllegalStateException("Unable to obtain release branch name from currentVersion value '${currentVersion}'")
    }

    return "release/${currentVersion.substring(0,3)}" //TODO: add additional error handling -- right now assumes "1.0.0-RELEASE" type syntax
}
