BROKER SCHEMA trx.sales.etps
/**********************************************************************
* Node Name:		CopyMQMD
* Module Name:		LegacyTPS_To_eTPS_Compute
* Description:		Copying the MQMD Headers and Body into Environment
***********************************************************************/

CREATE COMPUTE MODULE LegacyTPS_To_eTPS_Compute
	CREATE FUNCTION Main() RETURNS BOOLEAN
	BEGIN
		
		--For logging entire message
	 	DECLARE	rEnv REFERENCE TO Environment; 
	 	-- Copying InputRoot to OutputRoot
	 	SET  OutputRoot = InputRoot;
	 	DECLARE schemaName CHARACTER 'trx.sales.etps';
	 	DECLARE moduleName CHARACTER 'LegacyTPS_To_eTPS_Compute';
		SET Environment.Variables.Message = CAST(ASBITSTREAM( InputRoot.XMLNSC OPTIONS FolderBitStream) AS CHAR CCSID CAST(InputRoot.MQMD.CodedCharSetId AS INT) ENCODING CAST(InputRoot.MQMD.Encoding AS INT));
		CALL core.log.InfoMessage(rEnv, schemaName || '.' || moduleName, Environment.Variables.Message); 
		
		CALL CopyMessageHeaders();
		DECLARE refEnv REFERENCE TO OutputRoot;
		SET Environment.Properties = InputRoot.Properties;
		SET Environment.MQMD = InputRoot.MQMD;
		CREATE LASTCHILD OF Environment AS refEnv DOMAIN 'XMLNSC';
		SET refEnv = InputRoot.XMLNSC;
		RETURN TRUE;
	END;

	CREATE PROCEDURE CopyMessageHeaders() BEGIN
		DECLARE I INTEGER 1;
		DECLARE J INTEGER;
		SET J = CARDINALITY(InputRoot.*[]);
		WHILE I < J DO
			SET OutputRoot.*[I] = InputRoot.*[I];
			SET I = I + 1;
		END WHILE;
	END;

	CREATE PROCEDURE CopyEntireMessage() BEGIN
		SET OutputRoot = InputRoot;
	END;
END MODULE;
