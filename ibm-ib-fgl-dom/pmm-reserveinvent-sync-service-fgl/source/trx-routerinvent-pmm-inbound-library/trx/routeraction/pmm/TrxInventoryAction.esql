--* File name : TrxInventoryAction.esql
--* Purpose : To implement trx-inventoryaction-PMM flow.
--* Authors : Rohit Sharma
--* Create Date : 31th Aug 2016
--* Version : 1.0
--* Revision Date: 
--* @copyright MWW-FGLSPORTS 2015. All Rights Reserved.
BROKER SCHEMA trx.routeraction.pmm

--Decalre Constants-----
DECLARE theSchema CONSTANT CHARACTER 'trx.routeraction.pmm';

CREATE FILTER MODULE dom_pmm_filter
	DECLARE theModule CONSTANT CHARACTER theSchema||'.'||'hyb_Filter';
	CREATE FUNCTION Main() RETURNS BOOLEAN
	BEGIN
		DECLARE rEnv REFERENCE TO Environment;
		DECLARE MSG_ID CHARACTER rEnv.__MsgIdForLog4J__;
		RETURN TRUE;
	END;
END MODULE;

CREATE COMPUTE MODULE dom_pmm_BuildOutputMessage
	DECLARE theModule CONSTANT CHARACTER theSchema||'.'||'PMMRouteMessage';
	CREATE FUNCTION Main() RETURNS BOOLEAN
	BEGIN
		
		--CALL CopyMessageHeaders();
		CALL CopyEntireMessage();
		DECLARE rEnv REFERENCE TO Environment;        
		DECLARE rInput REFERENCE TO InputRoot;
		DECLARE rOutput REFERENCE TO OutputRoot;
		DECLARE actionFlag CHARACTER;
		DECLARE padCount INTEGER;
	    DECLARE MSG_ID CHARACTER rEnv.__MsgIdForLog4J__;
	    CALL core.log.Info(theModule||' - ID# : '||MSG_ID||' >> BEGIN');
		DECLARE refToInInventory REFERENCE To InputRoot.XMLNSC.PMMInventory;
		DECLARE action CHARACTER refToInInventory.(XMLNSC.Attribute)Action;
		DECLARE  labelName	CHARACTER;
		CALL core.log.Info(theModule||' - ActionType# : '||action);
		
	    IF (action = 'RESERVE') THEN
	    	SET labelName =  action;
	    	PROPAGATE TO TERMINAL 'out1';
 	    ELSEIF (action = 'CANCEL') THEN
	    	SET labelName =  action;
	    	PROPAGATE TO TERMINAL 'out2';
		ELSEIF (action ='TRANSFER') THEN
	        SET labelName =  action;
	    	PROPAGATE TO TERMINAL 'out3';
	    ELSE
	    	PROPAGATE TO TERMINAL 'out4';
	    END IF;
	    CALL core.log.Info(theModule||' - ID# : '||MSG_ID||' >> END');
	    RETURN FALSE;
	END;

	CREATE PROCEDURE CopyMessageHeaders() BEGIN
		DECLARE I INTEGER 1;
		DECLARE J INTEGER;
		SET J = CARDINALITY(InputRoot.*[]);
		WHILE I < J DO
			SET OutputRoot.*[I] = InputRoot.*[I];
			SET I = I + 1;
		END WHILE;
	END;

	CREATE PROCEDURE CopyEntireMessage() BEGIN
		SET OutputRoot = InputRoot;
	END;
		
END MODULE;
