









BROKER SCHEMA etc.pmm.insert

DECLARE theSchema CONSTANT CHARACTER 'etc.pmm.insert';

DECLARE nsEai,nsArts,nsPmm CHARACTER NULL;

DECLARE InventorySnapshotComplete CONSTANT CHARACTER 'InventorySnapshotComplete';
DECLARE InventorySnapshot CONSTANT CHARACTER 'InventorySnapshot';
DECLARE DistributionAdjustment CONSTANT CHARACTER 'DistributionAdjustment';
DECLARE InventoryAdjustment CONSTANT CHARACTER 'InventoryAdjustment';
DECLARE PixReceipt CONSTANT CHARACTER 'PixReceipt';
DECLARE ShippingInvoice CONSTANT CHARACTER 'ShippingInvoice';
DECLARE PixDockCheckIn CONSTANT CHARACTER 'DockCheckIn';
DECLARE PMMDataSource EXTERNAL CHARACTER '';
DECLARE FGL CONSTANT CHARACTER 'FGL';
DECLARE MWW CONSTANT CHARACTER 'MWW';

CREATE DATABASE MODULE pmm_InsertIntoInventorySnapshotComplete
	CREATE FUNCTION Main() RETURNS BOOLEAN
	BEGIN
		IF nsEai IS NULL THEN CALL common.eaiStagingPmm_getNamespace() INTO nsEai;
		END IF;
		DECLARE eai NAMESPACE nsEai;
		IF nsPmm IS NULL THEN CALL common.pmm_getNamespace()INTO nsPmm;
		END IF;
		DECLARE pmm NAMESPACE nsPmm;

		DECLARE rEnv REFERENCE TO Environment;
		DECLARE PMMSchemaName CHARACTER;
		CALL etc.pmm.getPMMSchemaName(rEnv) INTO PMMSchemaName;
		DECLARE PMMTableName CHARACTER;
		CALL etc.pmm.getPMMTableName(rEnv, InventorySnapshotComplete) INTO PMMTableName;
		DECLARE rPmm REFERENCE TO Root.XMLNSC.eai:Exchange.eai:Message.eai:{InventorySnapshotComplete}.pmm:{PMMTableName};

		DECLARE RECORD_SEQUENCE INTEGER; --1
		CALL etc.pmm.getPMMRecordSequence(rEnv) INTO RECORD_SEQUENCE;
		--DECLARE RECORD_DATE CHARACTER; --2
		DECLARE TRANSACTION_NUMBER INTEGER CAST(rPmm.pmm:TRANSACTION_NUMBER AS INTEGER); --3
		DECLARE TRANSACTION_SEQUENCE INTEGER CAST(rPmm.pmm:TRANSACTION_SEQUENCE AS INTEGER); --4
		DECLARE TRANSACTION_TYPE CHARACTER rPmm.pmm:TRANSACTION_TYPE; --5
		DECLARE TRANSACTION_CODE CHARACTER rPmm.pmm:TRANSACTION_CODE; --6
		DECLARE ACTION_CODE CHARACTER rPmm.pmm:ACTION_CODE; --7
		DECLARE REASON_CODE CHARACTER rPmm.pmm:REASON_CODE; --8
		DECLARE SNAPSHOT_DATE CHARACTER rPmm.pmm:SNAPSHOT_DATE; --9
		DECLARE PHYSICAL_WH_NUMBER CHARACTER rPmm.pmm:PHYSICAL_WH_NUMBER; --10 INTEGER?
		DECLARE SNAPSHOT_USER CHARACTER rPmm.pmm:SNAPSHOT_USER; --11

		DECLARE insertIntoInventorySnapshotBatch CHARACTER
		'INSERT INTO '||PMMSchemaName||'.'||PMMTableName||'('||
		'RECORD_SEQUENCE,RECORD_DATE,TRANSACTION_NUMBER,TRANSACTION_SEQUENCE,TRANSACTION_TYPE,TRANSACTION_CODE,ACTION_CODE,REASON_CODE,SNAPSHOT_DATE,PHYSICAL_WH_NUMBER,SNAPSHOT_USER'||
		---------------1-----------2------------------3--------------------4----------------5----------------6-----------7-----------8-------------9-----------------10------------11
		') VALUES('||
		'?,SYSDATE,?,?,?,?,?,?,to_date(?,''YYYY-MM-DD''),?,?'||
		---------2-----------8---------9----------------11
		')';
		SET rEnv.__InsertIntoInventorySnapshotBatch__[] = PASSTHRU(insertIntoInventorySnapshotBatch VALUES(
		RECORD_SEQUENCE,TRANSACTION_NUMBER,TRANSACTION_SEQUENCE,TRANSACTION_TYPE,TRANSACTION_CODE,ACTION_CODE,REASON_CODE,SNAPSHOT_DATE,PHYSICAL_WH_NUMBER,SNAPSHOT_USER
		--------------1------------------3--------------------4----------------5----------------6-----------7-----------8-------------9-----------------10------------11
		));

		RETURN TRUE;
	END;
END MODULE;

CREATE DATABASE MODULE pmm_InsertIntoInventorySnapshot
	CREATE FUNCTION Main() RETURNS BOOLEAN
	BEGIN
		IF nsEai IS NULL THEN CALL common.eaiStagingPmm_getNamespace() INTO nsEai;
		END IF;
		DECLARE eai NAMESPACE nsEai;
		IF nsPmm IS NULL THEN CALL common.pmm_getNamespace() INTO nsPmm;
		END IF;
		DECLARE pmm NAMESPACE nsPmm;

		DECLARE rEnv REFERENCE TO Environment;
		DECLARE PMMSchemaName CHARACTER;
		CALL etc.pmm.getPMMSchemaName(rEnv) INTO PMMSchemaName;
		DECLARE PMMTableName CHARACTER;
		CALL etc.pmm.getPMMTableName(rEnv, InventorySnapshot) INTO PMMTableName;
		DECLARE rPmm REFERENCE TO Root.XMLNSC.eai:Exchange.eai:Message.eai:{InventorySnapshot}.pmm:{PMMTableName};

		DECLARE RECORD_SEQUENCE INTEGER; --1
		CALL etc.pmm.getPMMRecordSequence(rEnv) INTO RECORD_SEQUENCE;
		--DECLARE RECORD_DATE CHARACTER; --2
		DECLARE TRANSACTION_NUMBER INTEGER CAST(rPmm.pmm:TRANSACTION_NUMBER AS INTEGER); --3
		DECLARE TRANSACTION_SEQUENCE INTEGER CAST(rPmm.pmm:TRANSACTION_SEQUENCE AS INTEGER); --4
		DECLARE TRANSACTION_TYPE CHARACTER rPmm.pmm:TRANSACTION_TYPE; --5
		DECLARE TRANSACTION_CODE CHARACTER rPmm.pmm:TRANSACTION_CODE; --6
		DECLARE ACTION_CODE CHARACTER rPmm.pmm:ACTION_CODE; --7
		DECLARE REASON_CODE CHARACTER rPmm.pmm:REASON_CODE; --8
		DECLARE SNAPSHOT_DATE CHARACTER TRIM(rPmm.pmm:SNAPSHOT_DATE); --9
		DECLARE PHYSICAL_WH_NUMBER CHARACTER rPmm.pmm:PHYSICAL_WH_NUMBER; --10 INTEGER?
		DECLARE INVENTORY_TYPE CHARACTER rPmm.pmm:INVENTORY_TYPE; --11
		DECLARE SKU_NUMBER CHARACTER rPmm.pmm:SKU_NUMBER; --12
		DECLARE SKU_TYPE CHARACTER rPmm.pmm:SKU_TYPE; --13
		DECLARE ACTUAL_QTY DECIMAL CAST(rPmm.pmm:ACTUAL_QTY AS DECIMAL); --14
		DECLARE SNAPSHOT_USER CHARACTER rPmm.pmm:SNAPSHOT_USER; --15
		DECLARE PROCESSED CONSTANT CHARACTER 'F'; --16 Hardcoded as 'F'

		DECLARE insertIntoInventorySnapshot CHARACTER
		'INSERT INTO '||PMMSchemaName||'.'||PMMTableName||'('||
		'RECORD_SEQUENCE,RECORD_DATE,TRANSACTION_NUMBER,TRANSACTION_SEQUENCE,TRANSACTION_TYPE,TRANSACTION_CODE,ACTION_CODE,REASON_CODE,SNAPSHOT_DATE,PHYSICAL_WH_NUMBER,INVENTORY_TYPE,SKU_NUMBER,SKU_TYPE,ACTUAL_QTY,SNAPSHOT_USER,PROCESSED'||
		---------------1-----------2------------------3--------------------4----------------5----------------6-----------7-----------8-------------9-----------------10-------------11---------12-------13---------14------------15--------16
		') VALUES('||
		'?,SYSDATE,?,?,?,?,?,?,to_date(?,''YYYY-MM-DD''),?,?,?,?,?,?,?'||
		---------2-----------8---------9--------------10----------16
		')';
		SET rEnv.__InsertIntoInventorySnapshot__[] = PASSTHRU(insertIntoInventorySnapshot VALUES(
		RECORD_SEQUENCE,TRANSACTION_NUMBER,TRANSACTION_SEQUENCE,TRANSACTION_TYPE,TRANSACTION_CODE,ACTION_CODE,REASON_CODE,SNAPSHOT_DATE,PHYSICAL_WH_NUMBER,INVENTORY_TYPE,SKU_NUMBER,SKU_TYPE,ACTUAL_QTY,SNAPSHOT_USER,PROCESSED
		--------------1------------------3--------------------4----------------5----------------6-----------7-----------8-------------9-----------------10-------------11---------12-------13---------14------------15--------16
		));

		RETURN TRUE;
	END;
	CREATE FUNCTION getActualQuantity(IN ref REFERENCE) RETURNS DECIMAL
	BEGIN
		DECLARE actualQty DECIMAL CAST(ref.ActualQuantity AS DECIMAL);
		RETURN actualQty;
	END;
END MODULE;

CREATE DATABASE MODULE pmm_InsertIntoDistributionAdjustment
	CREATE FUNCTION Main() RETURNS BOOLEAN
	BEGIN
		IF nsEai IS NULL THEN CALL common.eaiStagingPmm_getNamespace() INTO nsEai;
		END IF;
		DECLARE eai NAMESPACE nsEai;
		IF nsPmm IS NULL THEN CALL common.pmm_getNamespace()INTO nsPmm;
		END IF;
		DECLARE pmm NAMESPACE nsPmm;

		DECLARE rEnv REFERENCE TO Environment;
		DECLARE PMMSchemaName CHARACTER;
		CALL etc.pmm.getPMMSchemaName(rEnv) INTO PMMSchemaName;
		DECLARE PMMTableName CHARACTER;
		CALL etc.pmm.getPMMTableName(rEnv, DistributionAdjustment) INTO PMMTableName;
		DECLARE rPmm REFERENCE TO Root.XMLNSC.eai:Exchange.eai:Message.eai:{DistributionAdjustment}.pmm:{PMMTableName}; -- PMTableName
		DECLARE SbuCode CHARACTER Root.XMLNSC.eai:Exchange.eai:MessageRouting.eai:SbuCode;

		DECLARE RECORD_SEQUENCE INTEGER; --1
		CALL etc.pmm.getPMMRecordSequence(rEnv) INTO RECORD_SEQUENCE;
		--DECLARE RECORD_DATE TIMESTAMP CURRENT_DATE; --2
		DECLARE TRANSACTION_NUMBER CHARACTER rPmm.pmm:TRANSACTION_NUMBER; --3
		DECLARE TRANSACTION_SEQUENCE DECIMAL rPmm.pmm:TRANSACTION_SEQUENCE; --4
		DECLARE TRANSACTION_TYPE CHARACTER rPmm.pmm:TRANSACTION_TYPE; --5
		DECLARE TRANSACTION_CODE CHARACTER rPmm.pmm:TRANSACTION_CODE; --6
		DECLARE ACTION_CODE CHARACTER rPmm.pmm:ACTION_CODE; --7
		DECLARE REASON_CODE CHARACTER rPmm.pmm:REASON_CODE; --8
		DECLARE EXCEPTION_DATE CHARACTER rPmm.pmm:EXCEPTION_DATE; --9
		DECLARE SKU_NUMBER CHARACTER rPmm.pmm:SKU_NUMBER; --10
		DECLARE SKU_TYPE CHARACTER rPmm.pmm:SKU_TYPE; --11
		--CDH-3265 Production issue fix by Siddu : Changed data type of EXCEPTION_QTY to DECIMAL from Integer
		DECLARE EXCEPTION_QTY DECIMAL CAST(rPmm.pmm:EXCEPTION_QTY AS DECIMAL); --12
		DECLARE PHYSICAL_WH_NUMBER INTEGER rPmm.pmm:PHYSICAL_WH_NUMBER; --13
		DECLARE STORE_VENDOR_NUMBER DECIMAL CAST(rPmm.pmm:STORE_VENDOR_NUMBER AS DECIMAL); --14
		DECLARE DISTRIBUTION_NUMBER CHARACTER rPmm.pmm:DISTRIBUTION_NUMBER; --15
		DECLARE DISTRIBUTION_TYPE CHARACTER rPmm.pmm:DISTRIBUTION_TYPE; --16
		--Start of CDH-1612 - Alex Russell, 28-Aug 2015
		--DECLARE DISTRIBUTION_FUNCTION CONSTANT CHARACTER 'A'; --17 Hardcoded as 'A'
		DECLARE DISTRIBUTION_FUNCTION CHARACTER rPmm.pmm:DISTRIBUTION_FUNCTION; --'A'; --17 Hardcoded as 'A'
		--Finish of CDH-1612 - Alex Russell, 28-Aug 2015
		DECLARE PO_NUMBER CHARACTER rPmm.pmm:PO_NUMBER ; --18
		DECLARE EXCEPTION_USER CHARACTER rPmm.pmm:EXCEPTION_USER; --19
		DECLARE RESYNC_OK CHARACTER; --20 Never explicitly set
		DECLARE PROCESSED CONSTANT CHARACTER 'F'; --21 Hardcoded as 'F'
		DECLARE PROCESSED_DATE DATE NULL; --22 Never explicitly set
		DECLARE ERROR_CODE INTEGER; --23 Never explicitly set
		DECLARE PACK_LABEL_CODE CHARACTER; --24 Never explicitly set
		DECLARE PMG_DTL_TECH_KEY DECIMAL; --25 Never explicitly set


		IF SbuCode = FGL THEN -- CDH-3153 issue, Production issue fixed on 17th February
			SET RESYNC_OK = rPmm.pmm:RESYNC_OK; --20
			SET PACK_LABEL_CODE = rPmm.pmm:PACK_LABEL_CODE; -- 24
			SET PMG_DTL_TECH_KEY = rPmm.pmm:PMG_DTL_TECH_KEY; -- 25
		END IF;
		DECLARE insertIntoDistributionAdjustment CHARACTER
		'INSERT INTO '||PMMSchemaName||'.'||PMMTableName||'('||
		'RECORD_SEQUENCE,RECORD_DATE,TRANSACTION_NUMBER,TRANSACTION_SEQUENCE,TRANSACTION_TYPE,TRANSACTION_CODE,ACTION_CODE,REASON_CODE,EXCEPTION_DATE,SKU_NUMBER,SKU_TYPE,EXCEPTION_QTY,PHYSICAL_WH_NUMBER,STORE_VENDOR_NUMBER,DISTRIBUTION_NUMBER,DISTRIBUTION_TYPE,DISTRIBUTION_FUNCTION,PO_NUMBER,EXCEPTION_USER,RESYNC_OK,PROCESSED,PROCESSED_DATE,ERROR_CODE,PACK_LABEL_CODE,PMG_DTL_TECH_KEY'||
		---------------1-----------2------------------3--------------------4----------------5----------------6-----------7-----------8--------------9---------10-------11------------12-----------------13------------------14------------------15----------------16--------------------17--------18-------------19--------20--------21-------------22---------23--------------24---------------25
		') VALUES('||
		'?,SYSDATE,?,?,?,?,?,?,to_date(?,''YYYY-MM-DD''),?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?'||
		---------2-----------8---------9--------------10------------------20--------25
		')';
		SET rEnv.__InsertIntoDistributionAdjustment__[] = PASSTHRU(insertIntoDistributionAdjustment VALUES(
		RECORD_SEQUENCE,TRANSACTION_NUMBER,TRANSACTION_SEQUENCE,TRANSACTION_TYPE,TRANSACTION_CODE,ACTION_CODE,REASON_CODE,EXCEPTION_DATE,SKU_NUMBER,SKU_TYPE,EXCEPTION_QTY,PHYSICAL_WH_NUMBER,STORE_VENDOR_NUMBER,DISTRIBUTION_NUMBER,DISTRIBUTION_TYPE,DISTRIBUTION_FUNCTION,PO_NUMBER,EXCEPTION_USER,RESYNC_OK,PROCESSED,PROCESSED_DATE,ERROR_CODE,PACK_LABEL_CODE,PMG_DTL_TECH_KEY
		--------------1------------------3--------------------4----------------5----------------6-----------7-----------8--------------9---------10-------11------------12-----------------13------------------14------------------15----------------16--------------------17--------18-------------19--------20---------21------------22---------23--------------24---------------25
		));
		-- DECLARE insertIntoDistributionAdjustment CHARACTER
		-- 'INSERT INTO '||PMMSchemaName||'.'||PMMTableName||'('||
		-- 'RECORD_SEQUENCE,RECORD_DATE,TRANSACTION_NUMBER,TRANSACTION_SEQUENCE,TRANSACTION_TYPE,TRANSACTION_CODE,ACTION_CODE,REASON_CODE,EXCEPTION_DATE,SKU_NUMBER,SKU_TYPE,EXCEPTION_QTY,PHYSICAL_WH_NUMBER,STORE_VENDOR_NUMBER,DISTRIBUTION_NUMBER,DISTRIBUTION_TYPE,DISTRIBUTION_FUNCTION,PO_NUMBER,EXCEPTION_USER,RESYNC_OK,PROCESSED,PROCESSED_DATE,ERROR_CODE,PACK_LABEL_CODE,PMG_DTL_TECH_KEY'||
		-- ---------------1-----------2------------------3--------------------4----------------5----------------6-----------7-----------8--------------9---------10-------11------------12-----------------13------------------14------------------15----------------16--------------------17--------18-------------19--------20--------21-------------22---------23--------------24---------------25
		-- ') VALUES('||
		-- '?,SYSDATE,?,?,?,?,?,?,to_date(?,''YYYYMMDD''),?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?'||
		-- ---------2-----------8---------9--------------10------------------20--------25
		-- ')';
		-- SET rEnv.__InsertIntoDistributionAdjustment__[] = PASSTHRU(insertIntoDistributionAdjustment VALUES(
		-- RECORD_SEQUENCE,TRANSACTION_NUMBER,TRANSACTION_SEQUENCE,TRANSACTION_TYPE,TRANSACTION_CODE,ACTION_CODE,REASON_CODE,EXCEPTION_DATE,SKU_NUMBER,SKU_TYPE,EXCEPTION_QTY,PHYSICAL_WH_NUMBER,STORE_VENDOR_NUMBER,DISTRIBUTION_NUMBER,DISTRIBUTION_TYPE,DISTRIBUTION_FUNCTION,PO_NUMBER,EXCEPTION_USER,RESYNC_OK,PROCESSED,PROCESSED_DATE,ERROR_CODE,PACK_LABEL_CODE,PMG_DTL_TECH_KEY
		-- --------------1------------------3--------------------4----------------5----------------6-----------7-----------8--------------9---------10-------11------------12-----------------13------------------14------------------15----------------16--------------------17--------18-------------19--------20---------21------------22---------23--------------24---------------25
		-- ));

		RETURN TRUE;
	END;
END MODULE;

CREATE DATABASE MODULE pmm_InsertIntoInventoryAdjustment
	DECLARE theModule CONSTANT CHARACTER 'pmm_InsertIntoInventoryAdjustment';
	CREATE FUNCTION Main() RETURNS BOOLEAN
	BEGIN
		IF nsEai IS NULL THEN CALL common.eaiStagingPmm_getNamespace() INTO nsEai;
		END IF;
		DECLARE eai NAMESPACE nsEai;
		IF nsPmm IS NULL THEN CALL common.pmm_getNamespace() INTO nsPmm;
		END IF;
		DECLARE pmm NAMESPACE nsPmm;

		DECLARE rEnv REFERENCE TO Environment;
		DECLARE PMMSchemaName CHARACTER;
		CALL etc.pmm.getPMMSchemaName(rEnv) INTO PMMSchemaName;
		DECLARE PMMTableName CHARACTER;
		CALL etc.pmm.getPMMTableName(rEnv, InventoryAdjustment) INTO PMMTableName;
		DECLARE rPmm REFERENCE TO Root.XMLNSC.eai:Exchange.eai:Message.eai:{InventoryAdjustment}.pmm:{PMMTableName};

		DECLARE RECORD_SEQUENCE INTEGER; --1
		CALL etc.pmm.getPMMRecordSequence(rEnv) INTO RECORD_SEQUENCE;
		--DECLARE RECORD_DATE TIMESTAMP CURRENT_DATE; --2
		DECLARE TRANSACTION_NUMBER DECIMAL CAST(rPmm.pmm:TRANSACTION_NUMBER AS INTEGER); --3
		DECLARE TRANSACTION_SEQUENCE DECIMAL CAST(rPmm.pmm:TRANSACTION_SEQUENCE AS INTEGER); --4
		DECLARE TRANSACTION_TYPE CHARACTER rPmm.pmm:TRANSACTION_TYPE; --5
		DECLARE TRANSACTION_CODE CHARACTER rPmm.pmm:TRANSACTION_CODE; --6
		DECLARE ACTION_CODE CHARACTER rPmm.pmm:ACTION_CODE; --7
		DECLARE REASON_CODE CHARACTER rPmm.pmm:REASON_CODE; --8
		DECLARE ADJUSTMENT_DATE DATE CAST(CAST((SUBSTRING(rPmm.pmm:ADJUSTMENT_DATE FROM 1 FOR 4)||'-'||SUBSTRING(rPmm.pmm:ADJUSTMENT_DATE FROM 6 FOR 2)||'-'||SUBSTRING(rPmm.pmm:ADJUSTMENT_DATE FROM 9 FOR 2)) AS DATE) AS DATE FORMAT 'yy-mm-dd'); --9
		DECLARE PHYSICAL_WH_NUMBER DECIMAL CAST(rPmm.pmm:PHYSICAL_WH_NUMBER AS DECIMAL); --10
		DECLARE SKU_NUMBER CHARACTER rPmm.pmm:SKU_NUMBER; --11
		DECLARE SKU_TYPE CHARACTER rPmm.pmm:SKU_TYPE; --12
		DECLARE ADJUSTMENT_QTY DECIMAL CAST(rPmm.pmm:ADJUSTMENT_QTY AS INTEGER); --13
		DECLARE ADJUSTMENT_USER CHARACTER rPmm.pmm:ADJUSTMENT_USER; --14
		DECLARE PROCESSED CONSTANT CHARACTER 'F'; --15 Hardcoded as 'F' in this Application Integration *and* in the Oracle Database Schema/DDL
		DECLARE PROCESSED_DATE DATE; --16
		IF rPmm.pmm:PROCESSED_DATE IS NOT NULL AND ''<>rPmm.pmm:PROCESSED_DATE THEN
			SET PROCESSED_DATE = CAST(rPmm.pmm:PROCESSED_DATE AS DATE);
		END IF;
		DECLARE ERROR_CODE INTEGER; --17
		--THIS ORDER REFLECTS PMM AS-OF 6-Aug 2015
		--DO NOT CHANGE THIS *UNLESS* IT IS CHANGED TO MATCH PMM BECAUSE PMM IS/HAS CHANGED
		DECLARE insertIntoInventoryAdjustment CHARACTER
		'INSERT INTO '||PMMSchemaName||'.'||PMMTableName||'('||
		'RECORD_SEQUENCE,RECORD_DATE,TRANSACTION_NUMBER,TRANSACTION_SEQUENCE,TRANSACTION_TYPE,TRANSACTION_CODE,ACTION_CODE,REASON_CODE,ADJUSTMENT_DATE,PHYSICAL_WH_NUMBER,SKU_NUMBER,SKU_TYPE,ADJUSTMENT_QTY,ADJUSTMENT_USER,PROCESSED,PROCESSED_DATE,ERROR_CODE'||
		---------------1-----------2------------------3--------------------4----------------5----------------6-----------7-----------8---------------9-----------------10---------11-------12-------------13--------------14--------15-------------16---------17
		') VALUES('||
		'?,SYSDATE,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?'||
		---------2--------------10------------17
		')';
		CALL core.log.Debug('insertIntoInventoryAdjustment='||insertIntoInventoryAdjustment);
		--COLUMN_NAME DATA_TYPE NULLABLE DATA_DEFAULT COLUMN_ID COMMENTS
		---------------------------------------------------------------------------------
		--RECORD_SEQUENCE NUMBER(12,0) No (null) 1 (null)
		--RECORD_DATE DATE Yes (null) 2 (null)
		--TRANSACTION_NUMBER NUMBER(9,0) Yes (null) 3 (null)
		--TRANSACTION_SEQUENCE NUMBER(5,0) Yes (null) 4 (null)
		--TRANSACTION_TYPE CHAR(3 BYTE) Yes (null) 5 (null)
		--TRANSACTION_CODE CHAR(3 BYTE) Yes (null) 6 (null)
		--ACTION_CODE CHAR(2 BYTE) Yes (null) 7 (null)
		--REASON_CODE CHAR(2 BYTE) Yes (null) 8 (null)
		--ADJUSTMENT_DATE DATE Yes (null) 9 (null)
		--PHYSICAL_WH_NUMBER NUMBER(3,0) Yes (null) 10 (null)
		--SKU_NUMBER VARCHAR2(15 BYTE) Yes (null) 11 (null)
		--SKU_TYPE CHAR(1 BYTE) Yes (null) 12 (null)
		--ADJUSTMENT_QTY NUMBER(11,4) Yes (null) 13 (null)
		--ADJUSTMENT_USER VARCHAR2(10 BYTE) Yes (null) 14 (null)
		--PROCESSED CHAR(1 BYTE) No 'F' 15 (null)
		--PROCESSED_DATE DATE Yes (null) 16 (null)
		--ERROR_CODE NUMBER(5,0) Yes (null) 17 (null)
		IF TRUE=TRUE THEN
			CALL core.log.LogFromEsql(rEnv,theSchema||'.'||theModule,
			'INSERT INTO '||PMMSchemaName||'.'||PMMTableName||'('||
			'RECORD_SEQUENCE,RECORD_DATE,TRANSACTION_NUMBER,TRANSACTION_SEQUENCE,TRANSACTION_TYPE,TRANSACTION_CODE,ACTION_CODE,REASON_CODE,ADJUSTMENT_DATE,PHYSICAL_WH_NUMBER,SKU_NUMBER,SKU_TYPE,ADJUSTMENT_QTY,ADJUSTMENT_USER,PROCESSED,PROCESSED_DATE,ERROR_CODE'||
			---------------1-----------2------------------3--------------------4----------------5----------------6-----------7-----------8---------------9-----------------10---------11-------12-------------13--------------14--------15-------------16---------17
			') VALUES('||
			COALESCE(CAST(RECORD_SEQUENCE AS CHARACTER),'null')||','|| --1
			'SYSDATE'||','|| --2
			COALESCE(CAST(TRANSACTION_NUMBER AS CHARACTER),'null')||','|| --3
			COALESCE(CAST(TRANSACTION_SEQUENCE AS CHARACTER),'null')||','|| --4
			COALESCE(''''||TRANSACTION_TYPE||'''','null')||','|| --5
			COALESCE(''''||TRANSACTION_CODE||'''','null')||','|| --6
			COALESCE(''''||ACTION_CODE||'''','null')||','|| --7
			COALESCE(''''||REASON_CODE||'''','null')||','|| --8
			COALESCE(''''||CAST(ADJUSTMENT_DATE AS CHARACTER)||'''','null')||','|| --9
			COALESCE(''''||CAST(PHYSICAL_WH_NUMBER AS CHARACTER)||'''','null')||','|| --10
			COALESCE(''''||SKU_NUMBER||'''','null')||','|| --11
			COALESCE(''''||SKU_TYPE||'''','null')||','|| --12
			COALESCE(CAST(ADJUSTMENT_QTY AS CHARACTER),'null')||','|| --13
			COALESCE(''''||ADJUSTMENT_USER||'''','null')||','|| --14
			COALESCE(''''||PROCESSED||'''','''F''')||','|| --15
			COALESCE(''''||CAST(PROCESSED_DATE AS CHARACTER)||'''','null')||','|| --16
			COALESCE(CAST(ERROR_CODE AS CHARACTER),'null')|| --17
			')');
		END IF;
		SET rEnv.__InsertIntoInventoryAdjustment__[] = PASSTHRU(insertIntoInventoryAdjustment VALUES(
		RECORD_SEQUENCE,TRANSACTION_NUMBER,TRANSACTION_SEQUENCE,TRANSACTION_TYPE,TRANSACTION_CODE,ACTION_CODE,REASON_CODE,ADJUSTMENT_DATE,PHYSICAL_WH_NUMBER,SKU_NUMBER,SKU_TYPE,ADJUSTMENT_QTY,ADJUSTMENT_USER,PROCESSED,PROCESSED_DATE,ERROR_CODE
		--------------1------------------3--------------------4----------------5----------------6-----------7-----------8---------------9-----------------10---------11-------12-------------13--------------14--------15-------------16---------17
		));

		RETURN TRUE;
	END;
END MODULE;

CREATE DATABASE MODULE pmm_InsertIntoPixReceipt
	CREATE FUNCTION Main() RETURNS BOOLEAN
	BEGIN
		IF nsEai IS NULL THEN CALL common.eaiStagingPmm_getNamespace() INTO nsEai;
		END IF;
		DECLARE eai NAMESPACE nsEai;
		IF nsPmm IS NULL THEN CALL common.pmm_getNamespace() INTO nsPmm;
		END IF;
		DECLARE pmm NAMESPACE nsPmm;

		DECLARE rEnv REFERENCE TO Environment;
		DECLARE PMMSchemaName CHARACTER;
		CALL etc.pmm.getPMMSchemaName(rEnv) INTO PMMSchemaName;
		DECLARE PMMTableName CHARACTER;
		CALL etc.pmm.getPMMTableName(rEnv, PixReceipt) INTO PMMTableName;
		DECLARE rPmm REFERENCE TO Root.XMLNSC.eai:Exchange.eai:Message.eai:{PixReceipt}.pmm:{PMMTableName};

		DECLARE RECORD_SEQUENCE INTEGER; --1
		CALL etc.pmm.getPMMRecordSequence(rEnv) INTO RECORD_SEQUENCE;
		--DECLARE RECORD_DATE CHARACTER; --2
		DECLARE TRANSACTION_NUMBER INTEGER CAST(rPmm.pmm:TRANSACTION_NUMBER AS INTEGER); --3
		DECLARE TRANSACTION_SEQUENCE INTEGER CAST(rPmm.pmm:TRANSACTION_SEQUENCE AS INTEGER); --4
		DECLARE TRANSACTION_TYPE CHARACTER rPmm.pmm:TRANSACTION_TYPE; --5
		DECLARE TRANSACTION_CODE CHARACTER rPmm.pmm:TRANSACTION_CODE; --6
		DECLARE ACTION_CODE CHARACTER rPmm.pmm:ACTION_CODE; --7
		DECLARE REASON_CODE CHARACTER rPmm.pmm:REASON_CODE; --8
		DECLARE RECEIPT_DATE CHARACTER rPmm.pmm:RECEIPT_DATE; --9
		DECLARE SKU_NUMBER CHARACTER rPmm.pmm:SKU_NUMBER; --10
		DECLARE SKU_TYPE CHARACTER rPmm.pmm:SKU_TYPE; --11
		DECLARE RECEIVED_QTY DECIMAL CAST(rPmm.pmm:RECEIVED_QTY AS DECIMAL);
		DECLARE PHYSICAL_WH_NUMBER INTEGER CAST(rPmm.pmm:PHYSICAL_WH_NUMBER AS INTEGER); --13
		DECLARE STORE_VENDOR_NUMBER INTEGER CAST(rPmm.pmm:STORE_VENDOR_NUMBER AS INTEGER); --14
		DECLARE ASN_TRANSFER_NUMBER CHARACTER rPmm.pmm:ASN_TRANSFER_NUMBER; --15
		DECLARE RECEIPT_TYPE CHARACTER rPmm.pmm:RECEIPT_TYPE; --16
		DECLARE PO_NUMBER CHARACTER rPmm.pmm:PO_NUMBER; --17
		DECLARE PMG_DTL_TECH_KEY INTEGER CAST(rPmm.pmm:PMG_DTL_TECH_KEY AS INTEGER); --18
		DECLARE MANIFEST_NUMBER CHARACTER rPmm.pmm:MANIFEST_NUMBER; --19
		DECLARE TRAILER_NUMBER CHARACTER rPmm.pmm:TRAILER_NUMBER; --20
		DECLARE APPOINTMENT_NUMBER CHARACTER rPmm.pmm:APPOINTMENT_NUMBER; --21
		DECLARE BOL_NUMBER CHARACTER rPmm.pmm:BOL_NUMBER; --22
		DECLARE CARTON_NUMBER CHARACTER rPmm.pmm:CARTON_NUMBER; --23
		DECLARE RECEIVED_BY CHARACTER rPmm.pmm:RECEIVED_BY; --24
		--DECLARE PROCESSED CHARACTER;
		--DECLARE PROCESSED_DATE DATE;
		--DECLARE ERROR_CODE INTEGER;


		IF 'FGL_WMS_RECEIPT' = PMMTableName THEN
			DECLARE insertIntoPixReceipt CHARACTER
			'INSERT INTO '||PMMSchemaName||'.'||PMMTableName||'('||
			'RECORD_SEQUENCE,RECORD_DATE,TRANSACTION_NUMBER,TRANSACTION_SEQUENCE,TRANSACTION_TYPE,TRANSACTION_CODE,ACTION_CODE,REASON_CODE,RECEIPT_DATE,SKU_NUMBER,SKU_TYPE,RECEIVED_QTY,PHYSICAL_WH_NUMBER,STORE_VENDOR_NUMBER,ASN_TRANSFER_NUMBER,RECEIPT_TYPE,PO_NUMBER,PMG_DTL_TECH_KEY,MANIFEST_NUMBER,TRAILER_NUMBER,APPOINTMENT_NUMBER,CARTON_NUMBER,RECEIVED_BY'||
			---------------1-----------2------------------3--------------------4----------------5----------------6-----------7-----------8------------9---------10-------11-----------12-----------------13------------------14------------------15-----------16--------17---------------18--------------19-------------20-----------------21------------22----------23
			') VALUES('||
			'?,SYSDATE,?,?,?,?,?,?,to_date(?,''YYYY-MM-DD''),?,?,?,?,?,?,?,?,?,?,?,?,?,?'||
			---------2-----------8---------9--------------10------------------20-----23
			')';
			SET rEnv.__InsertIntoPixReceipt__[] = PASSTHRU(insertIntoPixReceipt VALUES(
			RECORD_SEQUENCE,TRANSACTION_NUMBER,TRANSACTION_SEQUENCE,TRANSACTION_TYPE,TRANSACTION_CODE,ACTION_CODE,REASON_CODE,RECEIPT_DATE,SKU_NUMBER,SKU_TYPE,RECEIVED_QTY,PHYSICAL_WH_NUMBER,STORE_VENDOR_NUMBER,ASN_TRANSFER_NUMBER,RECEIPT_TYPE,PO_NUMBER,PMG_DTL_TECH_KEY,MANIFEST_NUMBER,TRAILER_NUMBER,APPOINTMENT_NUMBER,CARTON_NUMBER,RECEIVED_BY
			--------------1------------------3--------------------4----------------5----------------6-----------7-----------8------------9---------10-------11-----------12-----------------13------------------14------------------15-----------16--------17---------------18--------------19-------------20-----------------21------------22----------23
			));

		ELSEIF 'MWW_MANH_RECEIPT' = PMMTableName THEN
			DECLARE insertIntoPixReceipt CHARACTER
			'INSERT INTO '||PMMSchemaName||'.'||PMMTableName||'('||
			'RECORD_SEQUENCE,RECORD_DATE,TRANSACTION_NUMBER,TRANSACTION_SEQUENCE,TRANSACTION_TYPE,TRANSACTION_CODE,ACTION_CODE,REASON_CODE,RECEIPT_DATE,SKU_NUMBER,SKU_TYPE,RECEIVED_QTY,PHYSICAL_WH_NUMBER,STORE_VENDOR_NUMBER,ASN_TRANSFER_NUMBER,RECEIPT_TYPE,PO_NUMBER,PMG_DTL_TECH_KEY,MANIFEST_NUMBER,TRAILER_NUMBER,APPOINTMENT_NUMBER,BOL_NUMBER,CARTON_NUMBER,RECEIVED_BY'||
			---------------1-----------2------------------3--------------------4----------------5----------------6-----------7-----------8------------9---------10-------11-----------12-----------------13------------------14------------------15-----------16--------17---------------18--------------19-------------20-----------------21---------22------------23----------24
			') VALUES('||
			'?,SYSDATE,?,?,?,?,?,?,to_date(?,''YYYY-MM-DD''),?,?,?,?,?,?,?,?,?,?,?,?,?,?,?'||
			---------2-----------8---------9--------------10------------------20------24
			')';
			SET rEnv.__InsertIntoPixReceipt__[] = PASSTHRU(insertIntoPixReceipt VALUES(
			RECORD_SEQUENCE,TRANSACTION_NUMBER,TRANSACTION_SEQUENCE,TRANSACTION_TYPE,TRANSACTION_CODE,ACTION_CODE,REASON_CODE,RECEIPT_DATE,SKU_NUMBER,SKU_TYPE,RECEIVED_QTY,PHYSICAL_WH_NUMBER,STORE_VENDOR_NUMBER,ASN_TRANSFER_NUMBER,RECEIPT_TYPE,PO_NUMBER,PMG_DTL_TECH_KEY,MANIFEST_NUMBER,TRAILER_NUMBER,APPOINTMENT_NUMBER,BOL_NUMBER,CARTON_NUMBER,RECEIVED_BY
			--------------1------------------3--------------------4----------------5----------------6-----------7-----------8------------9---------10-------11-----------12-----------------13------------------14------------------15-----------16--------17---------------18--------------19-------------20-----------------21---------22------------23----------24
			));
		END IF;
		RETURN TRUE;
	END;
	CREATE FUNCTION getReceivedQuantity(IN ref REFERENCE) RETURNS DECIMAL
	BEGIN
		DECLARE receivedQty DECIMAL; --12 PXSTYL00.PXINVA
		IF ''<>ref.ReceivedQuantity AND 0<>ref.ReceivedQuantity THEN
			SET receivedQty = CAST(ref.ReceivedQuantity AS DECIMAL);
			IF 'S'=TRIM(ref.PXINAT) THEN SET receivedQty = -receivedQty; --PXSTYL00.PXINAT --This should be in the earlier transformation rules..
			END IF;
		ELSE
			SET receivedQty = CAST(ref.PXUNRC AS DECIMAL); --PXSTYL00.PXUNRC
		END IF;
		RETURN receivedQty;
	END;
	--CREATE FUNCTION getPmgDtlTechKey(IN ref REFERENCE) RETURNS INTEGER
	--BEGIN
	-- DECLARE pmgDtlTechKey INTEGER;
	-- IF '07'=ref.PXRCD1 THEN SET pmgDtlTechKey = ref.PXREF1;
	-- ELSEIF '07'=ref.PXRCD2 THEN SET pmgDtlTechKey = ref.PXREF2;
	-- ELSEIF '07'=ref.PXRCD3 THEN SET pmgDtlTechKey = ref.PXREF3;
	-- ELSEIF '07'=ref.PXRCD4 THEN SET pmgDtlTechKey = ref.PXREF4;
	-- ELSEIF '07'=ref.PXRCD5 THEN SET pmgDtlTechKey = ref.PXREF5;
	-- ELSEIF '07'=ref.PXRCD6 THEN SET pmgDtlTechKey = ref.PXREF6;
	-- END IF;
	-- RETURN pmgDtlTechKey;
	--END;
	--CREATE FUNCTION getManifestNumber(IN ref REFERENCE) RETURNS CHARACTER
	--BEGIN
	-- DECLARE manifestNumber INTEGER;
	-- IF '80'=ref.PXRCD1 THEN SET manifestNumber = ref.PXREF1;
	-- ELSEIF '80'=ref.PXRCD2 THEN SET manifestNumber = ref.PXREF2;
	-- ELSEIF '80'=ref.PXRCD3 THEN SET manifestNumber = ref.PXREF3;
	-- ELSEIF '80'=ref.PXRCD4 THEN SET manifestNumber = ref.PXREF4;
	-- ELSEIF '80'=ref.PXRCD5 THEN SET manifestNumber = ref.PXREF5;
	-- ELSEIF '80'=ref.PXRCD6 THEN SET manifestNumber = ref.PXREF6;
	-- END IF;
	-- RETURN manifestNumber;
	--END;
	--CREATE FUNCTION getTrailerNumber(IN ref REFERENCE) RETURNS CHARACTER
	--BEGIN
	-- DECLARE trailerNumber INTEGER;
	-- IF '09'=ref.PXRCD1 THEN SET trailerNumber = ref.PXREF1;
	-- ELSEIF '09'=ref.PXRCD2 THEN SET trailerNumber = ref.PXREF2;
	-- ELSEIF '09'=ref.PXRCD3 THEN SET trailerNumber = ref.PXREF3;
	-- ELSEIF '09'=ref.PXRCD4 THEN SET trailerNumber = ref.PXREF4;
	-- ELSEIF '09'=ref.PXRCD5 THEN SET trailerNumber = ref.PXREF5;
	-- ELSEIF '09'=ref.PXRCD6 THEN SET trailerNumber = ref.PXREF6;
	-- END IF;
	-- RETURN trailerNumber;
	--END;
	--CREATE FUNCTION getAppointmentNumber(IN ref REFERENCE) RETURNS CHARACTER
	--BEGIN
	-- DECLARE appointmentNumber INTEGER;
	-- IF '28'=ref.PXRCD1 THEN SET appointmentNumber = ref.PXREF1;
	-- ELSEIF '28'=ref.PXRCD2 THEN SET appointmentNumber = ref.PXREF2;
	-- ELSEIF '28'=ref.PXRCD3 THEN SET appointmentNumber = ref.PXREF3;
	-- ELSEIF '28'=ref.PXRCD4 THEN SET appointmentNumber = ref.PXREF4;
	-- ELSEIF '28'=ref.PXRCD5 THEN SET appointmentNumber = ref.PXREF5;
	-- ELSEIF '28'=ref.PXRCD6 THEN SET appointmentNumber = ref.PXREF6;
	-- END IF;
	-- RETURN appointmentNumber;
	--END;
	--CREATE FUNCTION getBillOfLadingNumber(IN ref REFERENCE) RETURNS CHARACTER
	--BEGIN
	-- DECLARE billOfLadingNumber INTEGER;
	-- IF '58'=ref.PXRCD1 THEN SET billOfLadingNumber = ref.PXREF1;
	-- ELSEIF '58'=ref.PXRCD2 THEN SET billOfLadingNumber = ref.PXREF2;
	-- ELSEIF '58'=ref.PXRCD3 THEN SET billOfLadingNumber = ref.PXREF3;
	-- ELSEIF '58'=ref.PXRCD4 THEN SET billOfLadingNumber = ref.PXREF4;
	-- ELSEIF '58'=ref.PXRCD5 THEN SET billOfLadingNumber = ref.PXREF5;
	-- ELSEIF '58'=ref.PXRCD6 THEN SET billOfLadingNumber = ref.PXREF6;
	-- END IF;
	-- RETURN billOfLadingNumber;
	--END;
END MODULE;

CREATE DATABASE MODULE pmm_InsertIntoShippingInvoice
	CREATE FUNCTION Main() RETURNS BOOLEAN
	BEGIN
		IF nsEai IS NULL THEN CALL common.eaiStagingPmm_getNamespace() INTO nsEai;
		END IF;
		DECLARE eai NAMESPACE nsEai;
		IF nsPmm IS NULL THEN CALL common.pmm_getNamespace()INTO nsPmm;
		END IF;
		DECLARE pmm NAMESPACE nsPmm;
		--DECLARE eai NAMESPACE 'http://www.fgl.com/exchange/staging/pmm';
		--DECLARE pmm NAMESPACE 'http://www.fglsports.com/schema/pmmstaging/tables/v1';

		DECLARE rEnv REFERENCE TO Environment;
		DECLARE PMMSchemaName CHARACTER;
		CALL etc.pmm.getPMMSchemaName(rEnv) INTO PMMSchemaName;
		DECLARE PMMTableName CHARACTER;
		--DECLARE PMMTableName CHARACTER 'MWW_MANH_SHIPMENT';
		CALL etc.pmm.getPMMTableName(rEnv, ShippingInvoice) INTO PMMTableName;
		DECLARE SBU_CD CHARACTER Root.XMLNSC.eai:Exchange.eai:MessageRouting.eai:SbuCode;
		--DECLARE shippingInvoiceSize INTEGER CARDINALITY (Root.XMLNSC.eai:Exchange.eai:Message.eai:ShippingInvoice.pmm:MWW_MANH_SHIPMENT[]);

		DECLARE I INTEGER rEnv.__Exchange_Message_ShippingInvoice_Index__;
		--DECLARE rPmm REFERENCE TO Root.XMLNSC.eai:Exchange.eai:Message.eai:ShippingInvoice.pmm:MWW_MANH_SHIPMENT[I];
		DECLARE rPmm REFERENCE TO Root.XMLNSC.eai:Exchange.eai:Message.eai:ShippingInvoice.pmm:{PMMTableName}[I];
		DECLARE RECORD_SEQUENCE INTEGER; --1
		CALL etc.pmm.getPMMRecordSequence(rEnv) INTO RECORD_SEQUENCE;
		--DECLARE RECORD_DATE TIMESTAMP; --2
		DECLARE BATCH_NUMBER CHARACTER rPmm.pmm:BATCH_NUMBER;
		DECLARE BATCH_TYPE CHARACTER rPmm.pmm:BATCH_TYPE;
		DECLARE BATCH_MODE CHARACTER rPmm.pmm:BATCH_MODE;
		DECLARE SHIPMENT_DATE DATE rPmm.pmm:SHIPMENT_DATE;
		DECLARE PHYSICAL_WH_NUMBER INTEGER rPmm.pmm:PHYSICAL_WH_NUMBER;
		DECLARE STORE_VENDOR_NUMBER INTEGER rPmm.pmm:STORE_VENDOR_NUMBER;
		DECLARE BILL_OF_LADING CHARACTER TRIM(rPmm.pmm:BILL_OF_LADING);
		DECLARE TRAILER_NUMBER CHARACTER rPmm.pmm:TRAILER_NUMBER;
		DECLARE MANIFEST_NUMBER CHARACTER TRIM(rPmm.pmm:MANIFEST_NUMBER);
		DECLARE SHIPMENT_NUMBER CHARACTER rPmm.pmm:SHIPMENT_NUMBER;
		DECLARE TRACKING_NUMBER CHARACTER rPmm.pmm:TRACKING_NUMBER;
		DECLARE PALLET_NUMBER CHARACTER rPmm.pmm:PALLET_NUMBER;
		DECLARE CARTON_NUMBER CHARACTER rPmm.pmm:CARTON_NUMBER;
		DECLARE DISTRIBUTION_NUMBER CHARACTER rPmm.pmm:DISTRIBUTION_NUMBER;
		DECLARE DISTRIBUTION_TYPE CHARACTER rPmm.pmm:DISTRIBUTION_TYPE;
		DECLARE SKU_NUMBER CHARACTER TRIM(rPmm.pmm:SKU_NUMBER);
		DECLARE SKU_TYPE CHARACTER TRIM(rPmm.pmm:SKU_TYPE);
		DECLARE SHIPPED_QTY DECIMAL rPmm.pmm:SHIPPED_QTY;
		DECLARE PICKED_BY CHARACTER rPmm.pmm:PICKED_BY;
		DECLARE PACKED_BY CHARACTER rPmm.pmm:PACKED_BY;
		--DECLARE PROCESSED CHARACTER 'P'
		--DECLARE PROCESSED_DATE DATE CURRENT_DATE;
		--DECLARE ERROR_CODE CHARACTER '';
		IF(MWW=SBU_CD)THEN
		DECLARE SHIP_VIA CHARACTER rPmm.pmm:SHIP_VIA;
		DECLARE insertIntoShippingInvoice CHARACTER
		'INSERT INTO '||PMMSchemaName||'.'||PMMTableName||'('||
		'RECORD_SEQUENCE,RECORD_DATE,BATCH_NUMBER,BATCH_TYPE,BATCH_MODE,SHIPMENT_DATE,PHYSICAL_WH_NUMBER,STORE_VENDOR_NUMBER,BILL_OF_LADING,TRAILER_NUMBER,MANIFEST_NUMBER,SHIPMENT_NUMBER,SHIP_VIA,TRACKING_NUMBER,PALLET_NUMBER,CARTON_NUMBER,DISTRIBUTION_NUMBER,DISTRIBUTION_TYPE,SKU_NUMBER,SKU_TYPE,SHIPPED_QTY,PICKED_BY,PACKED_BY'||
		---------------1-----------2------------3----------4----------5-------------6------------------7-------------------8--------------9-------------10--------------11--------------12-------13--------------14------------15------------16------------------17----------------18---------19-------20----------21--------22--------23
		') VALUES('||
		'?,SYSDATE,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?'||
		---------2--------------10------------------20----23
		')';
		SET rEnv.__InsertIntoShippingInvoice__[] = PASSTHRU(insertIntoShippingInvoice VALUES(
		RECORD_SEQUENCE,BATCH_NUMBER,BATCH_TYPE,BATCH_MODE,SHIPMENT_DATE,PHYSICAL_WH_NUMBER,STORE_VENDOR_NUMBER,BILL_OF_LADING,TRAILER_NUMBER,MANIFEST_NUMBER,SHIPMENT_NUMBER,SHIP_VIA,TRACKING_NUMBER,PALLET_NUMBER,CARTON_NUMBER,DISTRIBUTION_NUMBER,DISTRIBUTION_TYPE,SKU_NUMBER,SKU_TYPE,SHIPPED_QTY,PICKED_BY,PACKED_BY
		--------------1------------3----------4----------5-------------6------------------7-------------------8--------------9-------------10--------------11--------------12-------13--------------14------------15------------16------------------17----------------18---------19-------20----------21--------22--------23
		));
		ELSEIF(FGL=SBU_CD)THEN
		DECLARE insertIntoShippingInvoice CHARACTER
		'INSERT INTO '||PMMSchemaName||'.'||PMMTableName||'('||
		'RECORD_SEQUENCE,RECORD_DATE,BATCH_NUMBER,BATCH_TYPE,BATCH_MODE,SHIPMENT_DATE,PHYSICAL_WH_NUMBER,STORE_VENDOR_NUMBER,BILL_OF_LADING,TRAILER_NUMBER,MANIFEST_NUMBER,SHIPMENT_NUMBER,TRACKING_NUMBER,PALLET_NUMBER,CARTON_NUMBER,DISTRIBUTION_NUMBER,DISTRIBUTION_TYPE,SKU_NUMBER,SKU_TYPE,SHIPPED_QTY,PICKED_BY,PACKED_BY'||
		---------------1-----------2------------3----------4----------5-------------6------------------7-------------------8--------------9-------------10--------------11--------------12-------13--------------14------------15------------16------------------17----------------18---------19-------20----------21--------22----
		') VALUES('||
		'?,SYSDATE,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?'||
		---------2--------------10------------------20---22
		')';
		SET rEnv.__InsertIntoShippingInvoice__[] = PASSTHRU(insertIntoShippingInvoice VALUES(
		RECORD_SEQUENCE,BATCH_NUMBER,BATCH_TYPE,BATCH_MODE,SHIPMENT_DATE,PHYSICAL_WH_NUMBER,STORE_VENDOR_NUMBER,BILL_OF_LADING,TRAILER_NUMBER,MANIFEST_NUMBER,SHIPMENT_NUMBER,TRACKING_NUMBER,PALLET_NUMBER,CARTON_NUMBER,DISTRIBUTION_NUMBER,DISTRIBUTION_TYPE,SKU_NUMBER,SKU_TYPE,SHIPPED_QTY,PICKED_BY,PACKED_BY
		--------------1------------3----------4----------5-------------6------------------7-------------------8--------------9-------------10--------------11--------------12-------13--------------14------------15------------16------------------17----------------18---------19-------20----------21--------22
		));
	END IF;

	RETURN TRUE;
END;
END MODULE;

CREATE DATABASE MODULE pmm_InsertIntoDockCheckIn
	CREATE FUNCTION Main() RETURNS BOOLEAN
	BEGIN
		IF nsEai IS NULL THEN CALL common.eaiStagingPmm_getNamespace() INTO nsEai;
		END IF;
		DECLARE eai NAMESPACE nsEai;
		IF nsPmm IS NULL THEN CALL common.pmm_getNamespace() INTO nsPmm;
		END IF;
		DECLARE pmm NAMESPACE nsPmm;

		DECLARE rEnv REFERENCE TO Environment;
		DECLARE PMMSchemaName CHARACTER;
		CALL etc.pmm.getPMMSchemaName(rEnv) INTO PMMSchemaName;
		DECLARE PMMTableName CHARACTER;
		CALL etc.pmm.getPMMTableName(rEnv, PixDockCheckIn) INTO PMMTableName;
		DECLARE rPmm REFERENCE TO Root.XMLNSC.eai:Exchange.eai:Message.eai:{PixDockCheckIn}.pmm:{PMMTableName};

		DECLARE DSNNAME CHARACTER PMMDataSource;
		DECLARE RECORD_SEQUENCE INTEGER; --1
		CALL etc.pmm.getPMMRecordSequence(rEnv) INTO RECORD_SEQUENCE;
		DECLARE TRANSACTION_NUMBER INTEGER CAST(rPmm.pmm:TRANSACTION_NUMBER AS INTEGER); --3
		DECLARE TRANSACTION_SEQUENCE INTEGER CAST(rPmm.pmm:TRANSACTION_SEQUENCE AS INTEGER); --4
		DECLARE TRANSACTION_TYPE CHARACTER rPmm.pmm:TRANSACTION_TYPE; --5
		DECLARE TRANSACTION_CODE CHARACTER rPmm.pmm:TRANSACTION_CODE; --6
		DECLARE ACTION_CODE CHARACTER rPmm.pmm:ACTION_CODE; --7
		DECLARE REASON_CODE CHARACTER rPmm.pmm:REASON_CODE; --8
		DECLARE CHECKIN_DATE CHARACTER rPmm.pmm:CHECKIN_DATE ; --9
		DECLARE CHECKIN_TYPE CHARACTER rPmm.pmm:CHECKIN_TYPE; --10
		DECLARE PO_NUMBER CHARACTER rPmm.pmm:PO_NUMBER; --11
		DECLARE STORE_VENDOR_NUMBER CHARACTER rPmm.pmm:STORE_VENDOR_NUMBER; --12
		DECLARE PHYSICAL_WH_NUMBER INTEGER CAST(rPmm.pmm:PHYSICAL_WH_NUMBER AS INTEGER); --13
		DECLARE ASN_TRANSFER_NUMBER CHARACTER rPmm.pmm:ASN_TRANSFER_NUMBER; --14
		DECLARE APPOINTMENT_NUMBER CHARACTER rPmm.pmm:APPOINTMENT_NUMBER; --15
		DECLARE CHECKIN_BY CHARACTER rPmm.pmm:CHECKIN_BY; --16


		DECLARE insertIntoPixDockCheckIn CHARACTER
		'INSERT INTO '||PMMSchemaName||'.'||PMMTableName||'('||
		'RECORD_SEQUENCE,
		RECORD_DATE,
		TRANSACTION_NUMBER,
		TRANSACTION_SEQUENCE,
		TRANSACTION_TYPE,
		TRANSACTION_CODE,
		ACTION_CODE,
		REASON_CODE,
		CHECKIN_DATE,
		CHECKIN_TYPE,
		PO_NUMBER,
		STORE_VENDOR_NUMBER,
		PHYSICAL_WH_NUMBER,
		ASN_TRANSFER_NUMBER,
		APPOINTMENT_NUMBER,
		CHECKIN_BY'||
		---------------1-----------2------------------3--------------------4----------------5----------------6-----------7-----------8------------9---------10-------11-----------12-----------------13------------------14------------------15-----------16--------17---------------18--------------19-------------20-----------------21---------22------------23----------24
		') VALUES('||
		'?,SYSDATE,?,?,?,?,?,?,to_date(?,''YYYY-MM-DD''),?,?,?,?,?,?,?'||
		---------2-----------8---------9--------------10------------------20------24
		')';
		SET rEnv.__InsertIntoPixDockCheckIn__[] = PASSTHRU(insertIntoPixDockCheckIn VALUES(
		RECORD_SEQUENCE,TRANSACTION_NUMBER,TRANSACTION_SEQUENCE,TRANSACTION_TYPE,TRANSACTION_CODE,ACTION_CODE,REASON_CODE,CHECKIN_DATE,CHECKIN_TYPE,PO_NUMBER,STORE_VENDOR_NUMBER,
		PHYSICAL_WH_NUMBER,ASN_TRANSFER_NUMBER,APPOINTMENT_NUMBER,CHECKIN_BY
		--------------1------------------3--------------------4----------------5----------------6-----------7-----------8------------9---------10-------11-----------12-----------------13------------------14------------------15-----------16--------17---------------18--------------19-------------20-----------------21---------22------------23----------24
		));


		RETURN TRUE;
	END;

END MODULE;